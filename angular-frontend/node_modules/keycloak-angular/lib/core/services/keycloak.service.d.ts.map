{"version":3,"file":"keycloak.service.d.ts","sources":["keycloak.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as Keycloak_ from 'keycloak-js';\nexport declare const Keycloak: typeof Keycloak_;\nimport { ExcludedUrlRegex, KeycloakOptions } from '../interfaces/keycloak-options';\nimport { KeycloakEvent } from '../interfaces/keycloak-event';\nexport declare class KeycloakService {\n    private _instance;\n    private _userProfile;\n    private _enableBearerInterceptor;\n    private _silentRefresh;\n    private _loadUserProfileAtStartUp;\n    private _bearerPrefix;\n    private _authorizationHeaderName;\n    private _excludedUrls;\n    private _keycloakEvents$;\n    private bindsKeycloakEvents;\n    private loadExcludedUrls;\n    private initServiceValues;\n    init(options?: KeycloakOptions): Promise<boolean>;\n    login(options?: Keycloak.KeycloakLoginOptions): Promise<void>;\n    logout(redirectUri?: string): Promise<void>;\n    register(options?: Keycloak.KeycloakLoginOptions): Promise<void>;\n    isUserInRole(role: string, resource?: string): boolean;\n    getUserRoles(allRoles?: boolean): string[];\n    isLoggedIn(): Promise<boolean>;\n    isTokenExpired(minValidity?: number): boolean;\n    updateToken(minValidity?: number): Promise<boolean>;\n    loadUserProfile(forceReload?: boolean): Promise<Keycloak_.KeycloakProfile>;\n    getToken(): Promise<string>;\n    getUsername(): string;\n    clearToken(): void;\n    addTokenToHeader(headers?: HttpHeaders): import(\"rxjs\").Observable<HttpHeaders>;\n    getKeycloakInstance(): Keycloak.KeycloakInstance;\n    get excludedUrls(): ExcludedUrlRegex[];\n    get enableBearerInterceptor(): boolean;\n    get keycloakEvents$(): Subject<KeycloakEvent>;\n}\n"]}