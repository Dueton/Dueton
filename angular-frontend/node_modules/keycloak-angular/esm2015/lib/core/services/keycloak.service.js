import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { Subject, from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as Keycloak_ from 'keycloak-js';
export const Keycloak = Keycloak_;
import { KeycloakEventType } from '../interfaces/keycloak-event';
export class KeycloakService {
    constructor() {
        this._keycloakEvents$ = new Subject();
    }
    bindsKeycloakEvents() {
        this._instance.onAuthError = (errorData) => {
            this._keycloakEvents$.next({
                args: errorData,
                type: KeycloakEventType.OnAuthError,
            });
        };
        this._instance.onAuthLogout = () => {
            this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthLogout });
        };
        this._instance.onAuthRefreshSuccess = () => {
            this._keycloakEvents$.next({
                type: KeycloakEventType.OnAuthRefreshSuccess,
            });
        };
        this._instance.onAuthRefreshError = () => {
            this._keycloakEvents$.next({
                type: KeycloakEventType.OnAuthRefreshError,
            });
        };
        this._instance.onAuthSuccess = () => {
            this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthSuccess });
        };
        this._instance.onTokenExpired = () => {
            this._keycloakEvents$.next({
                type: KeycloakEventType.OnTokenExpired,
            });
        };
        this._instance.onReady = (authenticated) => {
            this._keycloakEvents$.next({
                args: authenticated,
                type: KeycloakEventType.OnReady,
            });
        };
    }
    loadExcludedUrls(bearerExcludedUrls) {
        const excludedUrls = [];
        for (const item of bearerExcludedUrls) {
            let excludedUrl;
            if (typeof item === 'string') {
                excludedUrl = { urlPattern: new RegExp(item, 'i'), httpMethods: [] };
            }
            else {
                excludedUrl = {
                    urlPattern: new RegExp(item.url, 'i'),
                    httpMethods: item.httpMethods,
                };
            }
            excludedUrls.push(excludedUrl);
        }
        return excludedUrls;
    }
    initServiceValues({ enableBearerInterceptor = true, loadUserProfileAtStartUp = false, bearerExcludedUrls = [], authorizationHeaderName = 'Authorization', bearerPrefix = 'Bearer', initOptions, }) {
        this._enableBearerInterceptor = enableBearerInterceptor;
        this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;
        this._authorizationHeaderName = authorizationHeaderName;
        this._bearerPrefix = bearerPrefix.trim().concat(' ');
        this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);
        this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;
    }
    init(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.initServiceValues(options);
            const { config, initOptions } = options;
            this._instance = Keycloak(config);
            this.bindsKeycloakEvents();
            const authenticated = yield this._instance.init(initOptions);
            if (authenticated && this._loadUserProfileAtStartUp) {
                yield this.loadUserProfile();
            }
            return authenticated;
        });
    }
    login(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._instance.login(options);
            if (this._loadUserProfileAtStartUp) {
                yield this.loadUserProfile();
            }
        });
    }
    logout(redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                redirectUri,
            };
            yield this._instance.logout(options);
            this._userProfile = undefined;
        });
    }
    register(options = { action: 'register' }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._instance.register(options);
        });
    }
    isUserInRole(role, resource) {
        let hasRole;
        hasRole = this._instance.hasResourceRole(role, resource);
        if (!hasRole) {
            hasRole = this._instance.hasRealmRole(role);
        }
        return hasRole;
    }
    getUserRoles(allRoles = true) {
        let roles = [];
        if (this._instance.resourceAccess) {
            for (const key in this._instance.resourceAccess) {
                if (this._instance.resourceAccess.hasOwnProperty(key)) {
                    const resourceAccess = this._instance.resourceAccess[key];
                    const clientRoles = resourceAccess['roles'] || [];
                    roles = roles.concat(clientRoles);
                }
            }
        }
        if (allRoles && this._instance.realmAccess) {
            const realmRoles = this._instance.realmAccess['roles'] || [];
            roles.push(...realmRoles);
        }
        return roles;
    }
    isLoggedIn() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this._instance.authenticated) {
                    return false;
                }
                yield this.updateToken(20);
                return true;
            }
            catch (error) {
                return false;
            }
        });
    }
    isTokenExpired(minValidity = 0) {
        return this._instance.isTokenExpired(minValidity);
    }
    updateToken(minValidity = 5) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._silentRefresh) {
                if (this.isTokenExpired()) {
                    throw new Error('Failed to refresh the token, or the session is expired');
                }
                return true;
            }
            if (!this._instance) {
                throw new Error('Keycloak Angular library is not initialized.');
            }
            return this._instance.updateToken(minValidity);
        });
    }
    loadUserProfile(forceReload = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._userProfile && !forceReload) {
                return this._userProfile;
            }
            if (!this._instance.authenticated) {
                throw new Error('The user profile was not loaded as the user is not logged in.');
            }
            return this._userProfile = yield this._instance.loadUserProfile();
        });
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateToken(10);
            return this._instance.token;
        });
    }
    getUsername() {
        if (!this._userProfile) {
            throw new Error('User not logged in or user profile was not loaded.');
        }
        return this._userProfile.username;
    }
    clearToken() {
        this._instance.clearToken();
    }
    addTokenToHeader(headers = new HttpHeaders()) {
        return from(this.getToken()).pipe(map((token) => token ? headers.set(this._authorizationHeaderName, this._bearerPrefix + token) : headers));
    }
    getKeycloakInstance() {
        return this._instance;
    }
    get excludedUrls() {
        return this._excludedUrls;
    }
    get enableBearerInterceptor() {
        return this._enableBearerInterceptor;
    }
    get keycloakEvents$() {
        return this._keycloakEvents$;
    }
}
KeycloakService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,